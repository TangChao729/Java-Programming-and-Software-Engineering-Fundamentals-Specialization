#BlueJ class context
comment0.target=BabyBirths
comment1.params=
comment1.target=void\ printNames()
comment10.params=name\ oldYear\ newYear\ gender
comment10.target=int\ whatIsNameInYear(java.lang.String,\ int,\ int,\ java.lang.String)
comment11.params=
comment11.target=void\ testWhatIsNameInYear()
comment12.params=name\ gender
comment12.target=int\ yearOfHighestRank(java.lang.String,\ java.lang.String)
comment12.text=Write\ the\ method\ yearOfHighestRank\ that\ has\ two\ parameters\:\ a\ string\ name,\ \ \n\ \ \ \ \ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ selects\ \na\ range\ of\ files\ to\ process\ and\ returns\ an\ integer,\ the\ year\ with\ the\ highest\ \nrank\ for\ the\ name\ and\ gender.\ If\ the\ name\ and\ gender\ are\ not\ in\ any\ of\ the\ selected\ \nfiles,\ it\ should\ return\ -1.\ For\ example,\ calling\ yearOfHighestRank\ with\ name\ Mason\ \nand\ gender\ \u2018M\u2019\ and\ selecting\ the\ three\ test\ files\ above\ results\ in\ returning\ the\ year\ \n2012.\ That\ is\ because\ Mason\ was\ ranked\ the\ \ 2nd\ most\ popular\ name\ in\ 2012,\ ranked\ 4th\ \nin\ 2013\ and\ ranked\ 3rd\ in\ 2014.\ His\ highest\ ranking\ was\ in\ 2012.
comment13.params=
comment13.target=void\ testYearOfHighestRank()
comment14.params=name\ gender
comment14.target=double\ getAverageRank(java.lang.String,\ java.lang.String)
comment14.text=\n\ Write\ the\ method\ getAverageRank\ that\ has\ two\ parameters\:\ a\ string\ name,\ \n\ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ selects\ \n\ a\ range\ of\ files\ to\ process\ and\ returns\ a\ double\ representing\ the\ average\ rank\ \n\ of\ the\ name\ and\ gender\ over\ the\ selected\ files.\ It\ should\ return\ -1.0\ if\ the\ name\ \n\ is\ not\ ranked\ in\ any\ of\ the\ selected\ files.\ For\ example\ calling\ getAverageRank\ with\ \n\ name\ Mason\ and\ gender\ \u2018M\u2019\ and\ selecting\ the\ three\ test\ files\ above\ results\ in\ \n\ returning\ 3.0,\ as\ he\ is\ rank\ 2\ in\ the\ year\ 2012,\ rank\ 4\ in\ 2013\ and\ rank\ 3\ in\ 2014.\ \ \n\ As\ another\ example,\ calling\ \ \ getAverageRank\ with\ name\ Jacob\ and\ gender\ \u2018M\u2019\ \n\ and\ selecting\ the\ three\ test\ files\ above\ results\ in\ returning\ 2.66.\n
comment15.params=
comment15.target=void\ testGetAverageRank()
comment16.params=year\ name\ gender
comment16.target=int\ getTotalBirthsRankedHigher(int,\ java.lang.String,\ java.lang.String)
comment16.text=\ Write\ the\ method\ getTotalBirthsRankedHigher\ that\ has\ three\ parameters\:\ an\ integer\ named\ year,\ \n\ a\ string\ named\ name,\ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ \n\ returns\ an\ integer,\ the\ total\ number\ of\ births\ of\ those\ names\ with\ the\ same\ gender\ and\ same\ \n\ year\ who\ are\ ranked\ higher\ than\ name.\ For\ example,\ if\ getTotalBirthsRankedHigher\ accesses\ \n\ the\ "yob2012short.csv"\ file\ with\ name\ set\ to\ \u201CEthan\u201D,\ gender\ set\ to\ \u201CM\u201D,\ and\ year\ set\ to\ 2012,\ \n\ then\ this\ method\ should\ return\ 15,\ since\ Jacob\ has\ 8\ births\ and\ Mason\ has\ 7\ births,\ and\ those\ \n\ are\ the\ only\ two\ ranked\ higher\ than\ Ethan.\ \n
comment17.params=
comment17.target=void\ testGetTotalBirthsRankedHigher()
comment2.params=fr
comment2.target=void\ totalBirths(edu.duke.FileResource)
comment3.params=
comment3.target=void\ testTotalBirths()
comment4.params=year\ name\ gender
comment4.target=int\ getRank(int,\ java.lang.String,\ java.lang.String)
comment5.params=
comment5.target=void\ testGetRank()
comment6.params=year\ name\ gender
comment6.target=int\ getNum(int,\ java.lang.String,\ java.lang.String)
comment7.params=
comment7.target=void\ testGetNum()
comment8.params=year\ rank\ gender
comment8.target=java.lang.String\ getName(int,\ int,\ java.lang.String)
comment9.params=
comment9.target=void\ testGetName()
numComments=18
